classname: Users
additional_imports:
  - from typing import AsyncGenerator, Generator # Used for search_all
  - from stytch.core.models import Name, SearchQuery
methods:
  - name: create
    use_base_path_as_api_path: True
    method: POST
    args:
      - name: email
        arg_type: Optional[str] = None
      - name: phone_number
        arg_type: Optional[str] = None
      - name: name
        arg_type: Optional[Union[Name, Dict[str, str]]] = None
        map_pydantic: true
      - name: create_user_as_pending
        arg_type: bool = False
      - name: attributes
        arg_type: Optional[Dict[str, str]] = None
      - name: trusted_metadata
        arg_type: Optional[Dict[str, Any]] = None
      - name: untrusted_metadata
        arg_type: Optional[Dict[str, Any]] = None
    response_type:
      user_id: str
      user: User
      email_id: str
      phone_id: str
      status: str # TODO: Could be coerced to enum
  - name: get
    method: GET
    api_path: user_id
    eval_api_path: true
    args:
      - name: user_id
        arg_type: str
    response_type:
      __extends: User
      user_id: str
  - name: get_pending
    method: GET
    api_path: pending
    args:
      - name: limit
        arg_type: Optional[int] = None
      - name: starting_after_id
        arg_type: Optional[str] = None
    response_type:
      users: List[User]
      has_more: bool
      next_starting_after_id: str
      total: int
  - name: search
    method: POST
    args:
      - name: limit
        arg_type: Optional[int] = None
      - name: cursor
        arg_type: Optional[str] = None
      - name: query
        arg_type: Optional[Union[SearchQuery, Dict[str, Any]]] = None
        map_pydantic: true
    response_type:
      results: List[User]
      results_metadata: SearchResultsMetadata
  - name: search_all
    manual_implementation: true
    args:
      - name: limit
        arg_type: Optional[int] = None
      - name: cursor
        arg_type: Optional[str] = None
      - name: query
        arg_type: Optional[Union[SearchQuery, Dict[str, Any]]] = None
        map_pydantic: true
  - name: delete
    method: DELETE
    api_path: user_id
    eval_api_path: true
    args:
      - name: user_id
        arg_type: str
    response_type:
      user_id: str
  - name: update
    method: PUT
    api_path: user_id
    eval_api_path: true
    args:
      - name: user_id
        arg_type: str
      - name: emails
        arg_type: Optional[List[str]] = None
      - name: phone_numbers
        arg_type: Optional[List[str]] = None
      - name: crypto_wallets
        arg_type: Optional[List[str]] = None
      - name: name
        arg_type: Optional[Union[Name, Dict[str, str]]] = None
        map_pydantic: true
      - name: attributes
        arg_type: Optional[Dict[str, str]] = None
      - name: trusted_metadata
        arg_type: Optional[Dict[str, Any]] = None
      - name: untrusted_metadata
        arg_type: Optional[Dict[str, Any]] = None
    response_type:
      user_id: str
      user: User
      emails: List[Email]
      phone_numbers: List[PhoneNumber]
      crypto_wallets: List[CryptoWallet]
  - name: delete_email
    method: DELETE
    api_path: 'f"emails/{email_id}"'
    eval_api_path: true
    args:
      - name: email_id
        arg_type: str
    response_type:
      user_id: str
      user: User
  - name: delete_phone_number
    method: DELETE
    api_path: 'f"phone_numbers/{phone_id}"'
    eval_api_path: true
    args:
      - name: phone_id
        arg_type: str
    response_type:
      user_id: str
      user: User
  - name: delete_webauthn_registration
    method: DELETE
    api_path: 'f"webauthn_registrations/{webauthn_registration_id}"'
    eval_api_path: true
    args:
      - name: webauthn_registration_id
        arg_type: str
    response_type:
      user_id: str
      user: User
  - name: delete_totp
    method: DELETE
    api_path: 'f"totps/{totp_id}"'
    eval_api_path: true
    args:
      - name: totp_id
        arg_type: str
    response_type:
      user_id: str
      user: User
  - name: delete_crypto_wallet
    method: DELETE
    api_path: 'f"crypto_wallets/{crypto_wallet_id}"'
    eval_api_path: true
    args:
      - name: crypto_wallet_id
        arg_type: str
    response_type:
      user_id: str
      user: User
  - name: delete_password
    method: DELETE
    api_path: 'f"passwords/{password_id}"'
    eval_api_path: true
    args:
      - name: password_id
        arg_type: str
    response_type:
      user_id: str
      user: User
  - name: delete_biometric_registration
    method: DELETE
    api_path: 'f"biometric_registrations/{biometric_registration_id}"'
    eval_api_path: true
    args:
      - name: biometric_registration_id
        arg_type: str
    response_type:
      user_id: str
      user: User
  - name: delete_oauth_user_registration
    method: DELETE
    api_path: 'f"oauth/{oauth_user_registration_id}"'
    eval_api_path: true
    args:
      - name: oauth_user_registration_id
        arg_type: str
    response_type:
      user_id: str
      user: User
