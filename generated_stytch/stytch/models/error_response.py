# coding: utf-8

"""
    Stytch

    This is the Stytch api.  You can find out more about Stytch at  [stytch.com](https://stytch.com).   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: hello@stytch.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stytch.configuration import Configuration


class ErrorResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_type': 'str',
        'error_message': 'str',
        'display_message': 'str',
        'error_url': 'str'
    }

    attribute_map = {
        'error_type': 'error_type',
        'error_message': 'error_message',
        'display_message': 'display_message',
        'error_url': 'error_url'
    }

    def __init__(self, error_type=None, error_message=None, display_message=None, error_url=None, local_vars_configuration=None):  # noqa: E501
        """ErrorResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error_type = None
        self._error_message = None
        self._display_message = None
        self._error_url = None
        self.discriminator = None

        if error_type is not None:
            self.error_type = error_type
        if error_message is not None:
            self.error_message = error_message
        if display_message is not None:
            self.display_message = display_message
        if error_url is not None:
            self.error_url = error_url

    @property
    def error_type(self):
        """Gets the error_type of this ErrorResponse.  # noqa: E501

        The type of error such as user_not_found, invalid_parameters, etc that specifically describes the reason the error occurred.  # noqa: E501

        :return: The error_type of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this ErrorResponse.

        The type of error such as user_not_found, invalid_parameters, etc that specifically describes the reason the error occurred.  # noqa: E501

        :param error_type: The error_type of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._error_type = error_type

    @property
    def error_message(self):
        """Gets the error_message of this ErrorResponse.  # noqa: E501

        A human readable description of the error with details on debugging.  # noqa: E501

        :return: The error_message of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ErrorResponse.

        A human readable description of the error with details on debugging.  # noqa: E501

        :param error_message: The error_message of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def display_message(self):
        """Gets the display_message of this ErrorResponse.  # noqa: E501

        A message that can be displayed to the user. null if the error is not related to user action.  # noqa: E501

        :return: The display_message of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_message

    @display_message.setter
    def display_message(self, display_message):
        """Sets the display_message of this ErrorResponse.

        A message that can be displayed to the user. null if the error is not related to user action.  # noqa: E501

        :param display_message: The display_message of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._display_message = display_message

    @property
    def error_url(self):
        """Gets the error_url of this ErrorResponse.  # noqa: E501

        Url for where in the docs to find more information about this error.  # noqa: E501

        :return: The error_url of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_url

    @error_url.setter
    def error_url(self, error_url):
        """Sets the error_url of this ErrorResponse.

        Url for where in the docs to find more information about this error.  # noqa: E501

        :param error_url: The error_url of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._error_url = error_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorResponse):
            return True

        return self.to_dict() != other.to_dict()
