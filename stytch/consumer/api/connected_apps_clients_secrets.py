# !!!
# WARNING: This file is autogenerated
# Only modify code within MANUAL() sections
# or your changes may be overwritten later!
# !!!

from __future__ import annotations

from typing import Any, Dict

from stytch.consumer.models.connected_apps_clients_secrets import (
    RotateCancelResponse,
    RotateResponse,
    RotateStartResponse,
)
from stytch.core.api_base import ApiBase
from stytch.core.http.client import AsyncClient, SyncClient


class Secrets:
    def __init__(
        self, api_base: ApiBase, sync_client: SyncClient, async_client: AsyncClient
    ) -> None:
        self.api_base = api_base
        self.sync_client = sync_client
        self.async_client = async_client

    def rotate_start(
        self,
        client_id: str,
    ) -> RotateStartResponse:
        headers: Dict[str, str] = {}
        data: Dict[str, Any] = {
            "client_id": client_id,
        }

        url = self.api_base.url_for(
            "/v1/connected_apps/clients/{client_id}/secrets/rotate/start", data
        )
        res = self.sync_client.post(url, data, headers)
        return RotateStartResponse.from_json(res.response.status_code, res.json)

    async def rotate_start_async(
        self,
        client_id: str,
    ) -> RotateStartResponse:
        headers: Dict[str, str] = {}
        data: Dict[str, Any] = {
            "client_id": client_id,
        }

        url = self.api_base.url_for(
            "/v1/connected_apps/clients/{client_id}/secrets/rotate/start", data
        )
        res = await self.async_client.post(url, data, headers)
        return RotateStartResponse.from_json(res.response.status, res.json)

    def rotate_cancel(
        self,
        client_id: str,
    ) -> RotateCancelResponse:
        headers: Dict[str, str] = {}
        data: Dict[str, Any] = {
            "client_id": client_id,
        }

        url = self.api_base.url_for(
            "/v1/connected_apps/clients/{client_id}/secrets/rotate/cancel", data
        )
        res = self.sync_client.post(url, data, headers)
        return RotateCancelResponse.from_json(res.response.status_code, res.json)

    async def rotate_cancel_async(
        self,
        client_id: str,
    ) -> RotateCancelResponse:
        headers: Dict[str, str] = {}
        data: Dict[str, Any] = {
            "client_id": client_id,
        }

        url = self.api_base.url_for(
            "/v1/connected_apps/clients/{client_id}/secrets/rotate/cancel", data
        )
        res = await self.async_client.post(url, data, headers)
        return RotateCancelResponse.from_json(res.response.status, res.json)

    def rotate(
        self,
        client_id: str,
    ) -> RotateResponse:
        headers: Dict[str, str] = {}
        data: Dict[str, Any] = {
            "client_id": client_id,
        }

        url = self.api_base.url_for(
            "/v1/connected_apps/clients/{client_id}/secrets/rotate", data
        )
        res = self.sync_client.post(url, data, headers)
        return RotateResponse.from_json(res.response.status_code, res.json)

    async def rotate_async(
        self,
        client_id: str,
    ) -> RotateResponse:
        headers: Dict[str, str] = {}
        data: Dict[str, Any] = {
            "client_id": client_id,
        }

        url = self.api_base.url_for(
            "/v1/connected_apps/clients/{client_id}/secrets/rotate", data
        )
        res = await self.async_client.post(url, data, headers)
        return RotateResponse.from_json(res.response.status, res.json)
