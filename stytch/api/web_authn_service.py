# !!!
# WARNING: This file is autogenerated
# Only modify code within MANUAL() sections
# or your changes may be overwritten later!
# !!!

from typing import Any, Dict, Optional

from stytch.core.api_base import ApiBase
from stytch.core.http.client import AsyncClient, SyncClient
from stytch.models.web_authn_service import (
    WebauthnauthenticateResponse,
    WebauthnauthenticatestartResponse,
    WebauthnregisterResponse,
    WebauthnregisterstartResponse,
)


class WebAuthnService:
    def __init__(
        self,
        api_base: ApiBase,
        sync_client: SyncClient,
        async_client: AsyncClient,
    ) -> None:
        self.api_base = api_base
        self.sync_client = sync_client
        self.async_client = async_client

    @property
    def sub_url(self) -> str:
        return "web_authn_service"

    def WebAuthnRegisterStart(
        self,
        user_id: str,
        domain: str,
        user_agent: str,
        authenticator_type: Optional[str] = None,
    ) -> WebauthnregisterstartResponse:
        payload: Dict[str, Any] = {
            "user_id": user_id,
            "domain": domain,
            "user_agent": user_agent,
        }

        if authenticator_type is not None:
            payload["authenticator_type"] = authenticator_type

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/webauthn/register/start"
        )

        res = self.sync_client.post(url, json=payload)
        return WebauthnregisterstartResponse.from_json(
            res.response.status_code, res.json
        )

    async def WebAuthnRegisterStart_async(
        self,
        user_id: str,
        domain: str,
        user_agent: str,
        authenticator_type: Optional[str] = None,
    ) -> WebauthnregisterstartResponse:
        payload: Dict[str, Any] = {
            "user_id": user_id,
            "domain": domain,
            "user_agent": user_agent,
        }

        if authenticator_type is not None:
            payload["authenticator_type"] = authenticator_type

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/webauthn/register/start"
        )

        res = await self.async_client.post(url, json=payload)
        return WebauthnregisterstartResponse.from_json(res.response.status, res.json)

    def WebAuthnRegister(
        self,
        user_id: str,
        public_key_credential: str,
    ) -> WebauthnregisterResponse:
        payload: Dict[str, Any] = {
            "user_id": user_id,
            "public_key_credential": public_key_credential,
        }

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/webauthn/register")

        res = self.sync_client.post(url, json=payload)
        return WebauthnregisterResponse.from_json(res.response.status_code, res.json)

    async def WebAuthnRegister_async(
        self,
        user_id: str,
        public_key_credential: str,
    ) -> WebauthnregisterResponse:
        payload: Dict[str, Any] = {
            "user_id": user_id,
            "public_key_credential": public_key_credential,
        }

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/webauthn/register")

        res = await self.async_client.post(url, json=payload)
        return WebauthnregisterResponse.from_json(res.response.status, res.json)

    def WebAuthnAuthenticateStart(
        self,
        user_id: str,
        domain: str,
    ) -> WebauthnauthenticatestartResponse:
        payload: Dict[str, Any] = {
            "user_id": user_id,
            "domain": domain,
        }

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/webauthn/authenticate/start"
        )

        res = self.sync_client.post(url, json=payload)
        return WebauthnauthenticatestartResponse.from_json(
            res.response.status_code, res.json
        )

    async def WebAuthnAuthenticateStart_async(
        self,
        user_id: str,
        domain: str,
    ) -> WebauthnauthenticatestartResponse:
        payload: Dict[str, Any] = {
            "user_id": user_id,
            "domain": domain,
        }

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/webauthn/authenticate/start"
        )

        res = await self.async_client.post(url, json=payload)
        return WebauthnauthenticatestartResponse.from_json(
            res.response.status, res.json
        )

    def WebAuthnAuthenticate(
        self,
        public_key_credential: str,
        session_token: Optional[str] = None,
        session_duration_minutes: Optional[int] = None,
        session_jwt: Optional[str] = None,
        session_custom_claims: Optional[Dict[str, Any]] = None,
    ) -> WebauthnauthenticateResponse:
        payload: Dict[str, Any] = {
            "public_key_credential": public_key_credential,
        }

        if session_token is not None:
            payload["session_token"] = session_token
        if session_duration_minutes is not None:
            payload["session_duration_minutes"] = session_duration_minutes
        if session_jwt is not None:
            payload["session_jwt"] = session_jwt
        if session_custom_claims is not None:
            payload["session_custom_claims"] = session_custom_claims

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/webauthn/authenticate"
        )

        res = self.sync_client.post(url, json=payload)
        return WebauthnauthenticateResponse.from_json(
            res.response.status_code, res.json
        )

    async def WebAuthnAuthenticate_async(
        self,
        public_key_credential: str,
        session_token: Optional[str] = None,
        session_duration_minutes: Optional[int] = None,
        session_jwt: Optional[str] = None,
        session_custom_claims: Optional[Dict[str, Any]] = None,
    ) -> WebauthnauthenticateResponse:
        payload: Dict[str, Any] = {
            "public_key_credential": public_key_credential,
        }

        if session_token is not None:
            payload["session_token"] = session_token
        if session_duration_minutes is not None:
            payload["session_duration_minutes"] = session_duration_minutes
        if session_jwt is not None:
            payload["session_jwt"] = session_jwt
        if session_custom_claims is not None:
            payload["session_custom_claims"] = session_custom_claims

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/webauthn/authenticate"
        )

        res = await self.async_client.post(url, json=payload)
        return WebauthnauthenticateResponse.from_json(res.response.status, res.json)
