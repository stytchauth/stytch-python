# coding: utf-8

"""
    Stytch

    This is the Stytch api.  You can find out more about Stytch at  [stytch.com](https://stytch.com).   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: hello@stytch.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stytch.configuration import Configuration


class MagicLinkSendByEmail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'magic_link_url': 'str',
        'expiration_minutes': 'int',
        'template_id': 'str',
        'attributes': 'Attributes'
    }

    attribute_map = {
        'email': 'email',
        'magic_link_url': 'magic_link_url',
        'expiration_minutes': 'expiration_minutes',
        'template_id': 'template_id',
        'attributes': 'attributes'
    }

    def __init__(self, email=None, magic_link_url=None, expiration_minutes=None, template_id=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """MagicLinkSendByEmail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._magic_link_url = None
        self._expiration_minutes = None
        self._template_id = None
        self._attributes = None
        self.discriminator = None

        self.email = email
        if magic_link_url is not None:
            self.magic_link_url = magic_link_url
        if expiration_minutes is not None:
            self.expiration_minutes = expiration_minutes
        if template_id is not None:
            self.template_id = template_id
        if attributes is not None:
            self.attributes = attributes

    @property
    def email(self):
        """Gets the email of this MagicLinkSendByEmail.  # noqa: E501

        The email the user enters to sign in with.  # noqa: E501

        :return: The email of this MagicLinkSendByEmail.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MagicLinkSendByEmail.

        The email the user enters to sign in with.  # noqa: E501

        :param email: The email of this MagicLinkSendByEmail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def magic_link_url(self):
        """Gets the magic_link_url of this MagicLinkSendByEmail.  # noqa: E501

        The url the user clicks from the email magic link. This should be a url that your app receives and parses and subsequently send an api request to authenticate the magic link and log in the user.  # noqa: E501

        :return: The magic_link_url of this MagicLinkSendByEmail.  # noqa: E501
        :rtype: str
        """
        return self._magic_link_url

    @magic_link_url.setter
    def magic_link_url(self, magic_link_url):
        """Sets the magic_link_url of this MagicLinkSendByEmail.

        The url the user clicks from the email magic link. This should be a url that your app receives and parses and subsequently send an api request to authenticate the magic link and log in the user.  # noqa: E501

        :param magic_link_url: The magic_link_url of this MagicLinkSendByEmail.  # noqa: E501
        :type: str
        """

        self._magic_link_url = magic_link_url

    @property
    def expiration_minutes(self):
        """Gets the expiration_minutes of this MagicLinkSendByEmail.  # noqa: E501

        Set the expiration for the email magic link, in minutes. By default, it expires in 1 hour. The minimum expiration is 5 minutes and the maximum is 7 days (10080 mins).  # noqa: E501

        :return: The expiration_minutes of this MagicLinkSendByEmail.  # noqa: E501
        :rtype: int
        """
        return self._expiration_minutes

    @expiration_minutes.setter
    def expiration_minutes(self, expiration_minutes):
        """Sets the expiration_minutes of this MagicLinkSendByEmail.

        Set the expiration for the email magic link, in minutes. By default, it expires in 1 hour. The minimum expiration is 5 minutes and the maximum is 7 days (10080 mins).  # noqa: E501

        :param expiration_minutes: The expiration_minutes of this MagicLinkSendByEmail.  # noqa: E501
        :type: int
        """

        self._expiration_minutes = expiration_minutes

    @property
    def template_id(self):
        """Gets the template_id of this MagicLinkSendByEmail.  # noqa: E501

        The template id to use for the magic link, for example the template_id that corresponds to a specific email format.  # noqa: E501

        :return: The template_id of this MagicLinkSendByEmail.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this MagicLinkSendByEmail.

        The template id to use for the magic link, for example the template_id that corresponds to a specific email format.  # noqa: E501

        :param template_id: The template_id of this MagicLinkSendByEmail.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def attributes(self):
        """Gets the attributes of this MagicLinkSendByEmail.  # noqa: E501


        :return: The attributes of this MagicLinkSendByEmail.  # noqa: E501
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MagicLinkSendByEmail.


        :param attributes: The attributes of this MagicLinkSendByEmail.  # noqa: E501
        :type: Attributes
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MagicLinkSendByEmail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MagicLinkSendByEmail):
            return True

        return self.to_dict() != other.to_dict()
