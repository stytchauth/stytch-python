# !!!
# WARNING: This file is autogenerated
# Only modify code within MANUAL() sections
# or your changes may be overwritten later!
# !!!

from typing import Any, Dict, List, Optional, Union

import pydantic

from stytch.b2b.models.sso_service import (
    CreateoidcconnectionResponse,
    CreatesamlconnectionResponse,
    DeletesamlverificationcertificateResponse,
    DeletessoconnectionResponse,
    GetssoconnectionsResponse,
    SsoauthenticateResponse,
    UpdateoidcconnectionResponse,
    UpdatesamlconnectionbydocResponse,
    UpdatesamlconnectionbyurlResponse,
    UpdatesamlconnectionResponse,
)
from stytch.core.api_base import ApiBase
from stytch.core.http.client import AsyncClient, SyncClient


class SSOService:
    def __init__(
      self,
      api_base: ApiBase,
      sync_client: SyncClient,
      async_client: AsyncClient,
    ) -> None:
        self.api_base = api_base
        self.sync_client = sync_client
        self.async_client = async_client

    @property
    def sub_url(self) -> str:
        return "sso_service"

    def CreateOIDCConnection(
        self,
        organization_id: str,
        display_name: str,
    ) -> CreateoidcconnectionResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "display_name": display_name,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/oidc/{organization_id}")

        res = self.sync_client.post(url, json=payload)
        return CreateoidcconnectionResponse.from_json(res.response.status_code, res.json)

    async def CreateOIDCConnection_async(
      self,
      organization_id: str,
      display_name: str,
    ) -> CreateoidcconnectionResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "display_name": display_name,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/oidc/{organization_id}")

        res = await self.async_client.post(url, json=payload)
        return CreateoidcconnectionResponse.from_json(res.response.status, res.json)

    def CreateSAMLConnection(
        self,
        organization_id: str,
        display_name: str,
    ) -> CreatesamlconnectionResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "display_name": display_name,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{organization_id}")

        res = self.sync_client.post(url, json=payload)
        return CreatesamlconnectionResponse.from_json(res.response.status_code, res.json)

    async def CreateSAMLConnection_async(
      self,
      organization_id: str,
      display_name: str,
    ) -> CreatesamlconnectionResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "display_name": display_name,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{organization_id}")

        res = await self.async_client.post(url, json=payload)
        return CreatesamlconnectionResponse.from_json(res.response.status, res.json)

    def UpdateOIDCConnection(
        self,
        organization_id: str,
        connection_id: str,
        display_name: str,
        client_id: str,
        client_secret: str,
        issuer: str,
        authorization_url: str,
        token_url: str,
        userinfo_url: str,
        jwks_url: str,
    ) -> UpdateoidcconnectionResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "connection_id": connection_id,
            "display_name": display_name,
            "client_id": client_id,
            "client_secret": client_secret,
            "issuer": issuer,
            "authorization_url": authorization_url,
            "token_url": token_url,
            "userinfo_url": userinfo_url,
            "jwks_url": jwks_url,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/oidc/{organization_id}/connections/{connection_id}")

        res = self.sync_client.put(url, json=payload)
        return UpdateoidcconnectionResponse.from_json(res.response.status_code, res.json)

    async def UpdateOIDCConnection_async(
      self,
      organization_id: str,
      connection_id: str,
      display_name: str,
      client_id: str,
      client_secret: str,
      issuer: str,
      authorization_url: str,
      token_url: str,
      userinfo_url: str,
      jwks_url: str,
    ) -> UpdateoidcconnectionResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "connection_id": connection_id,
            "display_name": display_name,
            "client_id": client_id,
            "client_secret": client_secret,
            "issuer": issuer,
            "authorization_url": authorization_url,
            "token_url": token_url,
            "userinfo_url": userinfo_url,
            "jwks_url": jwks_url,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/oidc/{organization_id}/connections/{connection_id}")

        res = await self.async_client.put(url, json=payload)
        return UpdateoidcconnectionResponse.from_json(res.response.status, res.json)

    def UpdateSAMLConnection(
        self,
        organization_id: str,
        connection_id: str,
        idp_entity_id: str,
        display_name: str,
        attribute_mapping: Optional[Dict[str, Any]] = None,
        x509_certificate: str,
        idp_sso_url: str,
        None: None,
    ) -> UpdatesamlconnectionResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "connection_id": connection_id,
            "idp_entity_id": idp_entity_id,
            "display_name": display_name,
            "x509_certificate": x509_certificate,
            "idp_sso_url": idp_sso_url,
        }

        if attribute_mapping is not None:
            payload["attribute_mapping"] = attribute_mapping
        if None is not None:
            payload["None"] = None

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{organization_id}/connections/{connection_id}")

        res = self.sync_client.put(url, json=payload)
        return UpdatesamlconnectionResponse.from_json(res.response.status_code, res.json)

    async def UpdateSAMLConnection_async(
      self,
      organization_id: str,
      connection_id: str,
      idp_entity_id: str,
      display_name: str,
      attribute_mapping: Optional[Dict[str, Any]] = None,
      x509_certificate: str,
      idp_sso_url: str,
      None: None,
    ) -> UpdatesamlconnectionResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
            "connection_id": connection_id,
            "idp_entity_id": idp_entity_id,
            "display_name": display_name,
            "x509_certificate": x509_certificate,
            "idp_sso_url": idp_sso_url,
        }

        if attribute_mapping is not None:
            payload["attribute_mapping"] = attribute_mapping
        if None is not None:
            payload["None"] = None

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{organization_id}/connections/{connection_id}")

        res = await self.async_client.put(url, json=payload)
        return UpdatesamlconnectionResponse.from_json(res.response.status, res.json)

    def UpdateSAMLConnectionByURL(
        self,
        connection_id: str,
        metadata_url: str,
    ) -> UpdatesamlconnectionbyurlResponse:

        payload: Dict[str, Any] = {
            "connection_id": connection_id,
            "metadata_url": metadata_url,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{connection_id}/url")

        res = self.sync_client.put(url, json=payload)
        return UpdatesamlconnectionbyurlResponse.from_json(res.response.status_code, res.json)

    async def UpdateSAMLConnectionByURL_async(
      self,
      connection_id: str,
      metadata_url: str,
    ) -> UpdatesamlconnectionbyurlResponse:

        payload: Dict[str, Any] = {
            "connection_id": connection_id,
            "metadata_url": metadata_url,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{connection_id}/url")

        res = await self.async_client.put(url, json=payload)
        return UpdatesamlconnectionbyurlResponse.from_json(res.response.status, res.json)

    def UpdateSAMLConnectionByDoc(
        self,
        connection_id: str,
        metadata: None,
    ) -> UpdatesamlconnectionbydocResponse:

        payload: Dict[str, Any] = {
            "connection_id": connection_id,
        }

        if metadata is not None:
            payload["metadata"] = metadata

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{connection_id}/doc")

        res = self.sync_client.put(url, json=payload)
        return UpdatesamlconnectionbydocResponse.from_json(res.response.status_code, res.json)

    async def UpdateSAMLConnectionByDoc_async(
      self,
      connection_id: str,
      metadata: None,
    ) -> UpdatesamlconnectionbydocResponse:

        payload: Dict[str, Any] = {
            "connection_id": connection_id,
        }

        if metadata is not None:
            payload["metadata"] = metadata

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{connection_id}/doc")

        res = await self.async_client.put(url, json=payload)
        return UpdatesamlconnectionbydocResponse.from_json(res.response.status, res.json)

    def GetSSOConnections(
        self,
        organization_id: str,
    ) -> GetssoconnectionsResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/{organization_id}")

        res = self.sync_client.get(url, params=payload)
        return GetssoconnectionsResponse.from_json(res.response.status_code, res.json)

    async def GetSSOConnections_async(
      self,
      organization_id: str,
    ) -> GetssoconnectionsResponse:

        payload: Dict[str, Any] = {
            "organization_id": organization_id,
        }


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/{organization_id}")

        res = await self.async_client.get(url, params=payload)
        return GetssoconnectionsResponse.from_json(res.response.status, res.json)

    def DeleteSSOConnection(
        self,
        organization_id: str,
        connection_id: str,
    ) -> DeletessoconnectionResponse:


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/{organization_id}/connections/{connection_id}")

        res = self.sync_client.delete(url)
        return DeletessoconnectionResponse.from_json(res.response.status_code, res.json)

    async def DeleteSSOConnection_async(
      self,
      organization_id: str,
      connection_id: str,
    ) -> DeletessoconnectionResponse:


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/{organization_id}/connections/{connection_id}")

        res = await self.async_client.delete(url)
        return DeletessoconnectionResponse.from_json(res.response.status, res.json)

    def SSOAuthenticate(
        self,
        sso_token: str,
        pkce_code_verifier: Optional[str] = None,
        session_token: Optional[str] = None,
        session_jwt: Optional[str] = None,
        session_duration_minutes: Optional[int] = None,
        session_custom_claims: Optional[Dict[str, Any]] = None,
    ) -> SsoauthenticateResponse:

        payload: Dict[str, Any] = {
            "sso_token": sso_token,
        }

        if pkce_code_verifier is not None:
            payload["pkce_code_verifier"] = pkce_code_verifier
        if session_token is not None:
            payload["session_token"] = session_token
        if session_jwt is not None:
            payload["session_jwt"] = session_jwt
        if session_duration_minutes is not None:
            payload["session_duration_minutes"] = session_duration_minutes
        if session_custom_claims is not None:
            payload["session_custom_claims"] = session_custom_claims

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/authenticate")

        res = self.sync_client.post(url, json=payload)
        return SsoauthenticateResponse.from_json(res.response.status_code, res.json)

    async def SSOAuthenticate_async(
      self,
      sso_token: str,
      pkce_code_verifier: Optional[str] = None,
      session_token: Optional[str] = None,
      session_jwt: Optional[str] = None,
      session_duration_minutes: Optional[int] = None,
      session_custom_claims: Optional[Dict[str, Any]] = None,
    ) -> SsoauthenticateResponse:

        payload: Dict[str, Any] = {
            "sso_token": sso_token,
        }

        if pkce_code_verifier is not None:
            payload["pkce_code_verifier"] = pkce_code_verifier
        if session_token is not None:
            payload["session_token"] = session_token
        if session_jwt is not None:
            payload["session_jwt"] = session_jwt
        if session_duration_minutes is not None:
            payload["session_duration_minutes"] = session_duration_minutes
        if session_custom_claims is not None:
            payload["session_custom_claims"] = session_custom_claims

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/authenticate")

        res = await self.async_client.post(url, json=payload)
        return SsoauthenticateResponse.from_json(res.response.status, res.json)

    def DeleteSAMLVerificationCertificate(
        self,
        organization_id: str,
        connection_id: str,
        certificate_id: str,
    ) -> DeletesamlverificationcertificateResponse:


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{organization_id}/connections/{connection_id}/verification_certificates/{certificate_id}")

        res = self.sync_client.delete(url)
        return DeletesamlverificationcertificateResponse.from_json(res.response.status_code, res.json)

    async def DeleteSAMLVerificationCertificate_async(
      self,
      organization_id: str,
      connection_id: str,
      certificate_id: str,
    ) -> DeletesamlverificationcertificateResponse:


        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/b2b/sso/saml/{organization_id}/connections/{connection_id}/verification_certificates/{certificate_id}")

        res = await self.async_client.delete(url)
        return DeletesamlverificationcertificateResponse.from_json(res.response.status, res.json)

