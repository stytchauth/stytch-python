# !!!
# WARNING: This file is autogenerated
# Only modify code within MANUAL() sections
# or your changes may be overwritten later!
# !!!

from typing import Any, Dict

from stytch.b2b.models.magic_service import (
    MagiclinkredirectResponse,
    MagiclinksredirectcaptchaResponse,
)
from stytch.core.api_base import ApiBase
from stytch.core.http.client import AsyncClient, SyncClient


class MagicService:
    def __init__(
        self,
        api_base: ApiBase,
        sync_client: SyncClient,
        async_client: AsyncClient,
    ) -> None:
        self.api_base = api_base
        self.sync_client = sync_client
        self.async_client = async_client

    @property
    def sub_url(self) -> str:
        return "magic_service"

    def MagicLinkRedirect(
        self,
        public_token: str,
        token: str,
        stytch_token_type: str,
    ) -> MagiclinkredirectResponse:
        payload: Dict[str, Any] = {
            "public_token": public_token,
            "token": token,
            "stytch_token_type": stytch_token_type,
        }

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/magic_links/redirect")

        res = self.sync_client.get(url, params=payload)
        return MagiclinkredirectResponse.from_json(res.response.status_code, res.json)

    async def MagicLinkRedirect_async(
        self,
        public_token: str,
        token: str,
        stytch_token_type: str,
    ) -> MagiclinkredirectResponse:
        payload: Dict[str, Any] = {
            "public_token": public_token,
            "token": token,
            "stytch_token_type": stytch_token_type,
        }

        url = self.api_base.route_with_sub_url(self.sub_url, "/v1/magic_links/redirect")

        res = await self.async_client.get(url, params=payload)
        return MagiclinkredirectResponse.from_json(res.response.status, res.json)

    def MagicLinksRedirectCaptcha(
        self,
        public_token: str,
        redirect_url: str,
        captcha: str,
    ) -> MagiclinksredirectcaptchaResponse:
        payload: Dict[str, Any] = {
            "public_token": public_token,
            "redirect_url": redirect_url,
            "captcha": captcha,
        }

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/magic_links/redirect/captcha"
        )

        res = self.sync_client.post(url, json=payload)
        return MagiclinksredirectcaptchaResponse.from_json(
            res.response.status_code, res.json
        )

    async def MagicLinksRedirectCaptcha_async(
        self,
        public_token: str,
        redirect_url: str,
        captcha: str,
    ) -> MagiclinksredirectcaptchaResponse:
        payload: Dict[str, Any] = {
            "public_token": public_token,
            "redirect_url": redirect_url,
            "captcha": captcha,
        }

        url = self.api_base.route_with_sub_url(
            self.sub_url, "/v1/magic_links/redirect/captcha"
        )

        res = await self.async_client.post(url, json=payload)
        return MagiclinksredirectcaptchaResponse.from_json(
            res.response.status, res.json
        )
